### 通用返回结构
- Result<T>
  - code: 状态码（200 成功；400 业务错误；401 未认证；500 系统错误）
  - msg: 提示信息
  - data: 业务数据

### 用户 User

- GET `/user/profile`
  - 查询参数:
    - uid: 用户ID（string）
  - 响应体 data: UserVo
    - id: 用户ID
    - name: 用户名
    - email: 邮箱
    - identity: 角色（如 USER/ADMIN/SUPER_ADMIN）
    - submitCount: 提交数
    - passCount: AC 数
    - penaltyTime: 罚时
    - avatar: 头像URL
    - signature: 个性签名

- GET `/user/list`
  - 响应体:
    - data: List<UserVo>

- GET `/user/count`
  - 响应体:
    - data: long，用户总数

### 题目 Problem
- POST `/problem/get`
  - 查询参数:
    - id: 题目ID（string）
  - 响应体 data: ProblemVo
    - id, title, description
    - timeLimit: ms
    - memoryLimit: MB
    - difficulty: 难度（字符串）
    - inputExample / outputExample: 样例
    - hint: 提示
    - inputFormat / outputFormat: 输入输出格式说明
    - submitCount / passCount
    - open: 是否公开
    - tags: List<string> 标签名

- GET `/problem/tags`
  - 查询参数:
    - pid: 题目ID（long）
  - 响应体:
    - data: List<string> 标签名

- GET `/problem/list`
  - 查询参数:
    - keyword?: 关键字（题号或标题）
    - offset: 偏移（string，服务端再转 int）
    - size: 数量（string）
  - 响应体:
    - data: List<ProblemVo>

- GET `/problem/count`
  - 查询参数:
    - keyword?: 关键字
  - 响应体:
    - data: long，匹配数量

### 提交 Submission
- GET `/submission/get`
  - 查询参数:
    - id: 提交ID（string）
  - 响应体 data: SubmissionVo
    - id, cid（比赛ID）
    - userName, problemName
    - status: 评测状态
    - code: 源码（注意敏感字段展示策略）
    - createTime
    - language
    - time: ms
    - memory: KB/MB（以实体单位为准）
    - uid: 用户ID
    - pid: 题目ID

- GET `/submission/list`
  - 查询参数:
    - cid: 比赛ID（string）
    - uid: 用户ID（string）
    - language?: (cpp,java,python)
    - status?: (答案正确，答案错误，运行时错误，编译错误，时间超出限制)
    - pageNum: 页码（string）
    - pageSize: 每页大小（string）
  - 响应体:
    - data: List<SubmissionVo>

- GET `/submission/count`
  - 查询参数同上（cid/uid/language/status）
  - 响应体:
    - data: long

- GET `/notification/count`
  - 查询参数:
    - status?: 状态筛选
    - keyword?: 关键字
  - 响应体:
    - data: long（数量）


- GET `/competition/list`
  - 响应体:
    - data: List<CompetitionVo>
      - id, number, title, description
      - beginTime, endTime
      - needPassword: 是否需要密码
      - password: 比赛密码（注意对外隐藏，展示策略谨慎）

- GET `/competition/list-problem`
  - 查询参数:
    - id: 比赛ID
  - 响应体:
    - data: List<ProblemVo>

- GET `/competition/list-user`
  - 查询参数:
    - id: 比赛ID
  - 响应体:
    - data: List<UserVo>


- POST `/competition/judgeIsOpen`
  - 请求体:
    - now: 当前时间（string，服务端比较）
    - id: 比赛ID
  - 响应体: 无数据（成功表示开放中）

- POST `/competition/judgeIsEnd`
  - 请求体:
    - now: 当前时间
    - id: 比赛ID
  - 响应体: 无数据（成功表示已结束或提示）

- GET `/competition/count`
  - 响应体:
    - data: long

### 标签 Tag
- GET `/tag/list`
  - 响应体:
    - data: List<TagVo>（字段以 VO 为准）

- GET `/solve/list`
  - 查询参数:
    - pid: 题目ID（string）
  - 响应体:
    - data: List<SolveVo>
      - id, problemName, name, content, uid, pid, createTime, title


调用这些接口请注意在url后面加上token，它的值是Vnollx-Ai-Agent

